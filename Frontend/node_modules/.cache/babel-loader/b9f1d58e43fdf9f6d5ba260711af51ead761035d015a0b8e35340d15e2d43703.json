{"ast":null,"code":"var _jsxFileName = \"/home/dipti/Codes/QRCode_Generator/Frontend/src/components/CreateQR.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Import QRCode library\nimport { createQR, readProfile, updateProfile } from './api'; // Import your API functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateQR() {\n  _s();\n  const [profileId, setProfileId] = useState(''); // State to store the profile ID\n  const [qrData, setQRData] = useState(''); // State to store the QR code data\n  const [isQRGenerated, setIsQRGenerated] = useState(false); // State to track QR generation\n\n  const handleProfileIdChange = e => {\n    setProfileId(e.target.value);\n  };\n  const handleGenerateQR = async () => {\n    try {\n      const profile = await readProfile(profileId); // Fetch the profile data by ID\n      const profileType = profile.type;\n\n      // Check if the profile type is 'Personal' or 'Organization'\n      if (profileType === 'Personal') {\n        // Personal profiles can create multiple QR codes\n        const qrCodeData = {\n          type: profileType,\n          name: profile.name,\n          email: profile.email,\n          address: profile.address,\n          contact: profile.contact,\n          website: profile.website\n        };\n        const response = await createQR(qrCodeData); // Create a QR code\n        setQRData(response.qrData); // Set the QR code data\n        setIsQRGenerated(true); // Set the flag to indicate QR generation\n      } else if (profileType === 'Organization') {\n        // Organization profiles can create only one QR code\n        // Check if the organization already has a QR code\n        if (profile.hasQRCode) {\n          alert('Organization already has a QR code.');\n        } else {\n          const qrCodeData = {\n            type: profileType,\n            name: profile.name,\n            email: profile.email,\n            address: profile.address,\n            contact: profile.contact,\n            website: profile.website\n          };\n          const response = await createQR(qrCodeData); // Create a QR code\n          setQRData(response.qrData); // Set the QR code data\n          setIsQRGenerated(true); // Set the flag to indicate QR generation\n\n          // Update the organization's profile to indicate that a QR code has been created\n          await updateProfile(profileId, {\n            hasQRCode: true\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Enter Profile ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: profileId,\n        onChange: handleProfileIdChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateQR,\n      children: \"Generate QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), isQRGenerated && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated QR Code:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n        value: qrData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateQR, \"ycfht08PNbn9snU0vlWxFfm76Oo=\");\n_c = CreateQR;\nexport default CreateQR;\nvar _c;\n$RefreshReg$(_c, \"CreateQR\");","map":{"version":3,"names":["React","useState","QRCode","createQR","readProfile","updateProfile","jsxDEV","_jsxDEV","CreateQR","_s","profileId","setProfileId","qrData","setQRData","isQRGenerated","setIsQRGenerated","handleProfileIdChange","e","target","value","handleGenerateQR","profile","profileType","type","qrCodeData","name","email","address","contact","website","response","hasQRCode","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/dipti/Codes/QRCode_Generator/Frontend/src/components/CreateQR.js"],"sourcesContent":["import React, { useState } from 'react';\nimport QRCode from 'qrcode.react'; // Import QRCode library\nimport { createQR, readProfile, updateProfile } from './api'; // Import your API functions\n\nfunction CreateQR() {\n  const [profileId, setProfileId] = useState(''); // State to store the profile ID\n  const [qrData, setQRData] = useState(''); // State to store the QR code data\n  const [isQRGenerated, setIsQRGenerated] = useState(false); // State to track QR generation\n\n  const handleProfileIdChange = (e) => {\n    setProfileId(e.target.value);\n  };\n\n  const handleGenerateQR = async () => {\n    try {\n      const profile = await readProfile(profileId); // Fetch the profile data by ID\n      const profileType = profile.type;\n\n      // Check if the profile type is 'Personal' or 'Organization'\n      if (profileType === 'Personal') {\n        // Personal profiles can create multiple QR codes\n        const qrCodeData = {\n          type: profileType,\n          name: profile.name,\n          email: profile.email,\n          address: profile.address,\n          contact: profile.contact,\n          website: profile.website,\n        };\n\n        const response = await createQR(qrCodeData); // Create a QR code\n        setQRData(response.qrData); // Set the QR code data\n        setIsQRGenerated(true); // Set the flag to indicate QR generation\n      } else if (profileType === 'Organization') {\n        // Organization profiles can create only one QR code\n        // Check if the organization already has a QR code\n        if (profile.hasQRCode) {\n          alert('Organization already has a QR code.');\n        } else {\n          const qrCodeData = {\n            type: profileType,\n            name: profile.name,\n            email: profile.email,\n            address: profile.address,\n            contact: profile.contact,\n            website: profile.website,\n          };\n\n          const response = await createQR(qrCodeData); // Create a QR code\n          setQRData(response.qrData); // Set the QR code data\n          setIsQRGenerated(true); // Set the flag to indicate QR generation\n\n          // Update the organization's profile to indicate that a QR code has been created\n          await updateProfile(profileId, { hasQRCode: true });\n        }\n      }\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Create QR Code</h2>\n      <label>\n        Enter Profile ID:\n        <input type=\"text\" value={profileId} onChange={handleProfileIdChange} />\n      </label>\n      <button onClick={handleGenerateQR}>Generate QR Code</button>\n\n      {isQRGenerated && (\n        <div>\n          <h3>Generated QR Code:</h3>\n          <QRCode value={qrData} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CreateQR;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,cAAc,CAAC,CAAC;AACnC,SAASC,QAAQ,EAAEC,WAAW,EAAEC,aAAa,QAAQ,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9D,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE3D,MAAMe,qBAAqB,GAAIC,CAAC,IAAK;IACnCN,YAAY,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMjB,WAAW,CAACM,SAAS,CAAC,CAAC,CAAC;MAC9C,MAAMY,WAAW,GAAGD,OAAO,CAACE,IAAI;;MAEhC;MACA,IAAID,WAAW,KAAK,UAAU,EAAE;QAC9B;QACA,MAAME,UAAU,GAAG;UACjBD,IAAI,EAAED,WAAW;UACjBG,IAAI,EAAEJ,OAAO,CAACI,IAAI;UAClBC,KAAK,EAAEL,OAAO,CAACK,KAAK;UACpBC,OAAO,EAAEN,OAAO,CAACM,OAAO;UACxBC,OAAO,EAAEP,OAAO,CAACO,OAAO;UACxBC,OAAO,EAAER,OAAO,CAACQ;QACnB,CAAC;QAED,MAAMC,QAAQ,GAAG,MAAM3B,QAAQ,CAACqB,UAAU,CAAC,CAAC,CAAC;QAC7CX,SAAS,CAACiB,QAAQ,CAAClB,MAAM,CAAC,CAAC,CAAC;QAC5BG,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM,IAAIO,WAAW,KAAK,cAAc,EAAE;QACzC;QACA;QACA,IAAID,OAAO,CAACU,SAAS,EAAE;UACrBC,KAAK,CAAC,qCAAqC,CAAC;QAC9C,CAAC,MAAM;UACL,MAAMR,UAAU,GAAG;YACjBD,IAAI,EAAED,WAAW;YACjBG,IAAI,EAAEJ,OAAO,CAACI,IAAI;YAClBC,KAAK,EAAEL,OAAO,CAACK,KAAK;YACpBC,OAAO,EAAEN,OAAO,CAACM,OAAO;YACxBC,OAAO,EAAEP,OAAO,CAACO,OAAO;YACxBC,OAAO,EAAER,OAAO,CAACQ;UACnB,CAAC;UAED,MAAMC,QAAQ,GAAG,MAAM3B,QAAQ,CAACqB,UAAU,CAAC,CAAC,CAAC;UAC7CX,SAAS,CAACiB,QAAQ,CAAClB,MAAM,CAAC,CAAC,CAAC;UAC5BG,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;;UAExB;UACA,MAAMV,aAAa,CAACK,SAAS,EAAE;YAAEqB,SAAS,EAAE;UAAK,CAAC,CAAC;QACrD;MACF;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACE1B,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBhC,OAAA;MAAA4B,QAAA,GAAO,mBAEL,eAAA5B,OAAA;QAAOgB,IAAI,EAAC,MAAM;QAACJ,KAAK,EAAET,SAAU;QAAC8B,QAAQ,EAAExB;MAAsB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC,eACRhC,OAAA;MAAQkC,OAAO,EAAErB,gBAAiB;MAAAe,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE3DzB,aAAa,iBACZP,OAAA;MAAA4B,QAAA,gBACE5B,OAAA;QAAA4B,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BhC,OAAA,CAACL,MAAM;QAACiB,KAAK,EAAEP;MAAO;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9B,EAAA,CA1EQD,QAAQ;AAAAkC,EAAA,GAARlC,QAAQ;AA4EjB,eAAeA,QAAQ;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}