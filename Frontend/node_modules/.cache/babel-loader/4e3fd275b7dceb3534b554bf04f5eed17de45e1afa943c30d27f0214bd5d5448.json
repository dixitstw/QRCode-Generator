{"ast":null,"code":"var _jsxFileName = \"/home/dipti/Codes/QRCode_Generator/Frontend/src/components/CreateQR.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport QRCode from 'qrcode'; // Import the qrcode library\nimport { readProfile } from '../api'; // Import your API function to read the profile\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateQR() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the profile ID from the route parameter\n\n  const [profile, setProfile] = useState(null);\n  const [qrData, setQRData] = useState('');\n  useEffect(() => {\n    // Fetch the profile data by ID when the component mounts\n    async function fetchProfile() {\n      try {\n        const result = await readProfile(id); // Call your API function to read the profile by ID\n        setProfile(result);\n      } catch (error) {\n        console.error('Error fetching profile:', error);\n      }\n    }\n    fetchProfile();\n  }, [id]);\n  useEffect(() => {\n    // Check the type of profile and set QR code data accordingly\n    if (profile) {\n      if (profile.type === 'Organization' && profile.qrCode) {\n        // If it's an organization profile and a QR code already exists, use that QR code data\n        setQRData(profile.qrCode);\n      } else if (profile.type === 'Personal') {\n        // If it's a personal profile, generate a new QR code\n        const qrProfileData = {\n          type: profile.type,\n          name: profile.name,\n          email: profile.email,\n          address: profile.address,\n          contact: profile.contact,\n          website: profile.website\n        };\n        const qrCodeData = JSON.stringify(qrProfileData);\n\n        // Generate the QR code and set it as data URL\n        QRCode.toDataURL(qrCodeData, (err, url) => {\n          if (err) {\n            console.error('Error generating QR code:', err);\n          } else {\n            setQRData(url);\n\n            // Update the organization profile's QR code data if applicable\n            if (profile.type === 'Organization' && !profile.qrCode) {\n              // Make an API call to update the organization profile's QR code data\n              // This API call should be implemented in your backend\n              // Example: updateOrganizationQRCode(profile._id, url);\n            }\n          }\n        });\n      }\n    }\n  }, [profile]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [profile ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Profile Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", profile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", profile.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), qrData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: qrData,\n        alt: \"QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateQR, \"txRBd7Rv6yEh+H1IYswHT8qn0Fg=\", false, function () {\n  return [useParams];\n});\n_c = CreateQR;\nexport default CreateQR;\nvar _c;\n$RefreshReg$(_c, \"CreateQR\");","map":{"version":3,"names":["React","useState","useEffect","useParams","QRCode","readProfile","jsxDEV","_jsxDEV","CreateQR","_s","id","profile","setProfile","qrData","setQRData","fetchProfile","result","error","console","type","qrCode","qrProfileData","name","email","address","contact","website","qrCodeData","JSON","stringify","toDataURL","err","url","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/home/dipti/Codes/QRCode_Generator/Frontend/src/components/CreateQR.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport QRCode from 'qrcode'; // Import the qrcode library\nimport { readProfile } from '../api'; // Import your API function to read the profile\n\nfunction CreateQR() {\n  const { id } = useParams(); // Get the profile ID from the route parameter\n\n  const [profile, setProfile] = useState(null);\n  const [qrData, setQRData] = useState('');\n\n  useEffect(() => {\n    // Fetch the profile data by ID when the component mounts\n    async function fetchProfile() {\n      try {\n        const result = await readProfile(id); // Call your API function to read the profile by ID\n        setProfile(result);\n      } catch (error) {\n        console.error('Error fetching profile:', error);\n      }\n    }\n\n    fetchProfile();\n  }, [id]);\n\n  useEffect(() => {\n    // Check the type of profile and set QR code data accordingly\n    if (profile) {\n      if (profile.type === 'Organization' && profile.qrCode) {\n        // If it's an organization profile and a QR code already exists, use that QR code data\n        setQRData(profile.qrCode);\n      } else if (profile.type === 'Personal') {\n        // If it's a personal profile, generate a new QR code\n        const qrProfileData = {\n          type: profile.type,\n          name: profile.name,\n          email: profile.email,\n          address: profile.address,\n          contact: profile.contact,\n          website: profile.website,\n        };\n\n        const qrCodeData = JSON.stringify(qrProfileData);\n\n        // Generate the QR code and set it as data URL\n        QRCode.toDataURL(qrCodeData, (err, url) => {\n          if (err) {\n            console.error('Error generating QR code:', err);\n          } else {\n            setQRData(url);\n\n            // Update the organization profile's QR code data if applicable\n            if (profile.type === 'Organization' && !profile.qrCode) {\n              // Make an API call to update the organization profile's QR code data\n              // This API call should be implemented in your backend\n              // Example: updateOrganizationQRCode(profile._id, url);\n            }\n          }\n        });\n      }\n    }\n  }, [profile]);\n\n  return (\n    <div>\n      {profile ? (\n        <div>\n          <h2>Profile Details</h2>\n          <p>Name: {profile.name}</p>\n          <p>Email: {profile.email}</p>\n          {/* Add more attributes as needed */}\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n\n      {qrData && (\n        <div>\n          <h2>QR Code</h2>\n          <img src={qrData} alt=\"QR Code\" />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CreateQR;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}