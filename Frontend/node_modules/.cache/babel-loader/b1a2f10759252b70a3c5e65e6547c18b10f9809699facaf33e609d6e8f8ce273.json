{"ast":null,"code":"var _jsxFileName = \"/home/dipti/Codes/QRCode_Generator/Frontend/src/components/ScannableQRCode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // If you use React Router for routing\nimport QRCode from 'qrcode.react'; // Import the QRCode component\nimport { readQR } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScannableQRCode() {\n  _s();\n  const {\n    id\n  } = useParams(); // If you use React Router, this will extract the profile ID from the URL\n\n  const [qrCodeData, setQRCodeData] = useState(null);\n  useEffect(() => {\n    const fetchQRCode = async () => {\n      try {\n        const response = await readQR(id); // Use the readQR API function to fetch QR code data by ID\n        if (response.qr) {\n          setQRCodeData(response.qr.data);\n        } else {\n          console.error('QR code not found');\n        }\n      } catch (error) {\n        console.error('Error fetching QR code', error);\n      }\n    };\n    fetchQRCode();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Scan the QR Code below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), qrCodeData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Scan the QR code below:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(QRCode, {\n        value: qrCodeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(ScannableQRCode, \"Gl7H15XNv5Gcvsyj1jkhKFl5odc=\", false, function () {\n  return [useParams];\n});\n_c = ScannableQRCode;\nexport default ScannableQRCode;\nvar _c;\n$RefreshReg$(_c, \"ScannableQRCode\");","map":{"version":3,"names":["React","useState","useEffect","useParams","QRCode","readQR","jsxDEV","_jsxDEV","ScannableQRCode","_s","id","qrCodeData","setQRCodeData","fetchQRCode","response","qr","data","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","value","_c","$RefreshReg$"],"sources":["/home/dipti/Codes/QRCode_Generator/Frontend/src/components/ScannableQRCode.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // If you use React Router for routing\nimport QRCode from 'qrcode.react'; // Import the QRCode component\nimport { readQR } from '../api';\n\nfunction ScannableQRCode() {\n  const { id } = useParams(); // If you use React Router, this will extract the profile ID from the URL\n\n  const [qrCodeData, setQRCodeData] = useState(null);\n\n  useEffect(() => {\n    const fetchQRCode = async () => {\n      try {\n        const response = await readQR(id); // Use the readQR API function to fetch QR code data by ID\n        if (response.qr) {\n          setQRCodeData(response.qr.data);\n        } else {\n          console.error('QR code not found');\n        }\n      } catch (error) {\n        console.error('Error fetching QR code', error);\n      }\n    };\n\n    fetchQRCode();\n  }, [id]);\n\n  return (\n    <div>\n      <h2>Scan the QR Code below:</h2>\n      {qrCodeData ? (\n        <div>\n          <p>Scan the QR code below:</p>\n          <QRCode value={qrCodeData} />\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default ScannableQRCode;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,OAAOC,MAAM,MAAM,cAAc,CAAC,CAAC;AACnC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE5B,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACK,EAAE,CAAC,CAAC,CAAC;QACnC,IAAII,QAAQ,CAACC,EAAE,EAAE;UACfH,aAAa,CAACE,QAAQ,CAACC,EAAE,CAACC,IAAI,CAAC;QACjC,CAAC,MAAM;UACLC,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAC;QACpC;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDL,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACH,EAAE,CAAC,CAAC;EAER,oBACEH,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC/BZ,UAAU,gBACTJ,OAAA;MAAAY,QAAA,gBACEZ,OAAA;QAAAY,QAAA,EAAG;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9BhB,OAAA,CAACH,MAAM;QAACoB,KAAK,EAAEb;MAAW;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,gBAENhB,OAAA;MAAAY,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACd,EAAA,CAnCQD,eAAe;EAAA,QACPL,SAAS;AAAA;AAAAsB,EAAA,GADjBjB,eAAe;AAqCxB,eAAeA,eAAe;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}