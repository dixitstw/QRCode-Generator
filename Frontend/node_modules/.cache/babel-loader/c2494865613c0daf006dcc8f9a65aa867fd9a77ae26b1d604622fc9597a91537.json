{"ast":null,"code":"var _jsxFileName = \"/home/dipti/Codes/QRCode_Generator/Frontend/src/components/CreateQR.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { createQR } from './api'; // Import your API function for creating QR codes\nimport QRCode from 'qrcode-generator'; // Import QRCode from qrcode-generator\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateQRCode() {\n  _s();\n  const [qrData, setQRData] = useState({\n    type: '',\n    name: '',\n    email: '',\n    address: '',\n    contact: '',\n    website: ''\n  });\n  const [generatedQRCode, setGeneratedQRCode] = useState(null); // State to store generated QR code data\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setQRData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleCreateQRCode = async () => {\n    try {\n      // Call the API function to create a QR code\n      const response = await createQR(qrData);\n\n      // Generate the QR code using qrcode-generator\n      const qr = QRCode(0, 'L'); // Create a QRCode instance (0 for QR code type, 'L' for error correction level)\n\n      // Set the data to encode in the QR code\n      qr.addData(response.qrCodeData);\n      qr.make();\n\n      // Get the QR code data URL\n      const qrCodeDataUrl = qr.createDataURL();\n\n      // Set the generated QR code data URL\n      setGeneratedQRCode(qrCodeDataUrl);\n      alert('QR code created successfully');\n    } catch (error) {\n      console.error('Error creating QR code:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"type\",\n        value: qrData.type,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateQRCode,\n      children: \"Create QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), generatedQRCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated QR Code:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: generatedQRCode,\n        alt: \"QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateQRCode, \"fZdggraLDCEzr0Qd1QyLd//Q0NM=\");\n_c = CreateQRCode;\nexport default CreateQRCode;\nvar _c;\n$RefreshReg$(_c, \"CreateQRCode\");","map":{"version":3,"names":["React","useState","createQR","QRCode","jsxDEV","_jsxDEV","CreateQRCode","_s","qrData","setQRData","type","name","email","address","contact","website","generatedQRCode","setGeneratedQRCode","handleChange","e","value","target","prevData","handleCreateQRCode","response","qr","addData","qrCodeData","make","qrCodeDataUrl","createDataURL","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onClick","src","alt","_c","$RefreshReg$"],"sources":["/home/dipti/Codes/QRCode_Generator/Frontend/src/components/CreateQR.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { createQR } from './api'; // Import your API function for creating QR codes\nimport QRCode from 'qrcode-generator'; // Import QRCode from qrcode-generator\n\nfunction CreateQRCode() {\n  const [qrData, setQRData] = useState({\n    type: '',\n    name: '',\n    email: '',\n    address: '',\n    contact: '',\n    website: '',\n  });\n\n  const [generatedQRCode, setGeneratedQRCode] = useState(null); // State to store generated QR code data\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setQRData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleCreateQRCode = async () => {\n    try {\n      // Call the API function to create a QR code\n      const response = await createQR(qrData);\n\n      // Generate the QR code using qrcode-generator\n      const qr = QRCode(0, 'L'); // Create a QRCode instance (0 for QR code type, 'L' for error correction level)\n\n      // Set the data to encode in the QR code\n      qr.addData(response.qrCodeData);\n      qr.make();\n\n      // Get the QR code data URL\n      const qrCodeDataUrl = qr.createDataURL();\n      \n      // Set the generated QR code data URL\n      setGeneratedQRCode(qrCodeDataUrl);\n      \n      alert('QR code created successfully');\n    } catch (error) {\n      console.error('Error creating QR code:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Create QR Code</h2>\n      <div>\n        <label>Type:</label>\n        <input type=\"text\" name=\"type\" value={qrData.type} onChange={handleChange} />\n      </div>\n      {/* ... Other input fields ... */}\n      <button onClick={handleCreateQRCode}>Create QR Code</button>\n      \n      {generatedQRCode && (\n        <div>\n          <h3>Generated QR Code:</h3>\n          <img src={generatedQRCode} alt=\"QR Code\" />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CreateQRCode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}